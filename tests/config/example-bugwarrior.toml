# Example bugwarriorrc
# General stuff.

[general]
# Here you define a comma separated list of targets.  Each of them must have a
# section below determining their properties, how to query them, etc.  The name
# is just a symbol, and doesn't have any functional importance.
targets = [
    "activecollab",
    "activecollab2",
    "gitlab_config",
    "jira_project",
    "my_github",
    "my_gmail",
    "my_kanboard",
    "my_phabricator",
    "my_redmine",
    "my_teamlab",
    "moksha_trac",
    "pivotaltracker",
]
# If unspecified, the default taskwarrior config will be used.
# taskrc = /path/to/.taskrc
# Setting this to true will shorten links with http://da.gd/
shorten = false
# Setting this to True will include a link to the ticket in the description
inline_links = false
# Setting this to True will include a link to the ticket as an annotation
annotation_links = true
# Setting this to True will include issue comments and author name in task
# annotations
annotation_comments = true
# Setting this to False will strip newlines from comment annotations
annotation_newlines = false
# log_level specifies the verbosity.  The default is DEBUG.
# log_level can be one of DEBUG, INFO, WARNING, ERROR, CRITICAL, DISABLED
log_level = "DEBUG"
# If log_file is specified, output will be redirected there.  If it remains
# unspecified, output is sent to sys.stderr
log_file = "/var/log/bugwarrior.log"
# Configure the default description or annotation length.
# annotation_length = 45
# Use hooks to run commands prior to importing from `bugwarrior pull`.
# `bugwarrior pull` will run the commands in the order that they are specified
# below.
# 
# pre_import: The pre_import hook is invoked after all issues have been pulled
# from remote sources, but before they are synced to the TW db. If your
# pre_import script has a non-zero exit code, the `bugwarrior pull` command will
# exit early.

[hooks]
pre_import = ["/home/someuser/backup.sh", "/home/someuser/sometask.sh"]
# This section is for configuring notifications when `bugwarrior pull` runs,
# and when issues are created, updated, or deleted by `bugwarrior pull`.
# Three backends are currently supported:
# 
# - applescript        macOS      no external dependencies
# - gobject            Linux      python gobject must be installed
# 
# [notifications]
# notifications = True
# backend = gobject
# only_on_new_tasks = True
# This is a github example.  It says, "scrape every issue from every repository
# on http://github.com/ralphbean.  It doesn't matter if ralphbean owns the issue
# or not."

[my_github]
service = "github"
default_priority = "H"
add_tags = ["open_source"]
# This specifies that we should pull issues from repositories belonging
# to the 'ralphbean' github account.  See the note below about
# 'github.username' and 'github.login'.  They are different, and you need
# both.
username = "ralphbean"
# I want taskwarrior to include issues from all my repos, except these
# two because they're spammy or something.
exclude_repos = ["project_bar", "project_baz"]
# Working with a large number of projects, instead of excluding most of them I
# can also simply include just a limited set.
include_repos = ["project_foo", "project_foz"]
# Note that login and username can be different:  I can login as me, but
# scrape issues from an organization's repos.
# 
# - 'github.login' is the username you ask bugwarrior to
# login as.  Set it to your account.
# - 'github.username' is the github entity you want to pull
# issues for.  It could be you, or some other user entirely.
login = "ralphbean"
token = "123456"
# Here's an example of a trac target.

[moksha_trac]
service = "trac"
base_uri = "fedorahosted.org/moksha"
username = "ralph"
password = "OMG_LULZ"
only_if_assigned = "ralph"
also_unassigned = true
default_priority = "H"
add_tags = ["work"]
# Example gitlab configuration containing individual priorities

[gitlab_config]
service = "gitlab"
login = "ralphbean"
token = "OMG_LULZ"
host = "gitlab.com"
owned = true
default_issue_priority = "M"
default_todo_priority = "M"
default_mr_priority = "H"
# Here's an example of a jira project. The ``jira-python`` module is
# a bit particular, and jira deployments, like Bugzilla, tend to be
# reasonably customized. So YMMV. The ``base_uri`` must not have a
# have a trailing slash. In this case we fetch comments and
# cases from jira assigned to 'ralph' where the status is not closed or
# resolved.

[jira_project]
service = "jira"
base_uri = "https://jira.example.org"
username = "ralph"
password = "OMG_LULZ"
query = "assignee = ralph and status != closed and status != resolved"
# Set this to your jira major version. We currently support only jira version
# 4 and 5(the default). You can find your particular version in the footer at
# the dashboard.
version = 5
add_tags = ["enterprisey", "work"]
# This is a kanboard example.

[my_kanboard]
service = "kanboard"
url = "https://kanboard.example.org"
username = "ralphbean"
# Your password or, even better, API token
password = "my_api_token"
# A custom query to search for open issues. By default, assigned and open
# tasks are queried.
query = "status:open assignee:me"
# Here's an example of a phabricator target

[my_phabricator]
service = "phabricator"
# No need to specify credentials.  They are gathered from ~/.arcrc
# Here's an example of a teamlab target.

[my_teamlab]
service = "teamlab"
hostname = "teamlab.example.com"
login = "alice"
password = "secret"
# Here's an example of a redmine target.

[my_redmine]
service = "redmine"
url = "http://redmine.example.org/"
key = "c0c4c014cafebabe"
add_tags = ["chiliproject"]

[activecollab]
service = "activecollab"
url = "https://ac.example.org/api.php"
key = "your-api-key"
user_id = 15
add_tags = ["php"]

[activecollab2]
service = "activecollab2"
url = "http://ac.example.org/api.php"
key = "your-api-key"
user_id = 15
projects = {1 = "first_project", 5 = "another_project"}

[my_gmail]
service = "gmail"
query = "label:action OR label:readme"
login_name = "you@example.com"

[pivotaltracker]
service = "pivotaltracker"
token = "your-api-key"
version = "v5"
user_id = 123456
account_ids = ["first_account_id", "second_account_id"]
only_if_assigned = true
also_unassigned = false
only_if_author = false
import_labels_as_tags = true
label_template = "pivotal_{{label}}"
import_blockers = true
blocker_template = 'Description: {{description}} State: {{resolved}}\n'
annotation_template = "status: {{completed}} - MYDESC {{description}}"
exclude_projects = ["first_project_id", "second_project_id"]
exclude_stories = ["first_story_id", "second_story_id"]
exclude_tags = ["wont fix", "should fix"]
query = "mywork:1234 -has:label"

